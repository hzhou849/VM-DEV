CXX = g++
CXXFLAGS = -Wall -Werror -Wextra -pedantic -g -fsanitize=address

# Leaksanitizer tool to detect memory leak.
LDFLAGS =  -fsanitize=address

# Boost include
#INCLUDE = -I /opt/boost/1.64/Linux/x86_64/release/include/boost/
LBLIBS =  -lpthread -pthread -lncurses
CVER = -std=c++11 
#for libraries, ie libboost_program_options.so  you always leave off the leading
# "lib" so it becomes -lboost_program_options no .so or .a
#LPATH= -L /opt/boost/1.64/Linux/x86_64/release/lib -lboost_program_options


#Src specific file names
SRC = 3-moving_cursors.cpp

# build *.cpp
# SRC = $(wildcard *.cpp)
OBJ = $(wildcard *.o)
EXEC = main


all:$(EXEC)
	@echo "Compile completed!"
	
$(EXEC): $(OBJ)
	$(CXX) $(LDFLAGS) $(SRC) -o $@ $(OBJ) $(INCLUDE) $(LPATH) $(LBLIBS) $(CVER)

clean:
	rm -rf $(OBJ) $(EXEC)
	@echo "Cleanup complete"


#=============================================================================
# VERSION 2 (compiles all project files into seperate execs)
SRCS = $(wildcard *.cpp)

EXEC = $(patsubst %.cpp,%,$(SRCS))

all: $(EXEC)

%: %.cpp
	$(CXX) $(LDFLAGS) $(CVER) -o $@ $< $(INCLUDE) $(LPATH) $(LBLIBS) 
clean: 
	rm -f $(EXEC)



#Makefile 
# CC=gcc
# CXX=g++
# CFLAGS=-I. -lpthread -Wall -std=c++11  -pthread
# SRCS: condition_variable2.cpp
# 	$(CXX) $(CFLAGS)  -o main condition_variable2.cpp

# .PHONY: clean